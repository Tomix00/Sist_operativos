Ejercicio 1:
	a) 2 nucleos
	b) ¿porque aveces el cpu time es menor al wall time?
	no es aveces, es siempre, ya que el real time, refiere al tiempo que estuvo en user mode, kernel mode y demas operaciones que se realizan detras
	c)
	#1. realizo un solo llamado
	#2. 2 nucleos, ya que el real time(wall) y el cpu time son similares
	#1. sigue siendo la misma cantidad de nucles, ya que puede que solo haya ruido de otros procesos
	#4. 2 cores, en este caso, 2 procesos de pi se realizan en un core y otros 2 en otro, se nota en que tienen el mismo cpu time en dos casos y para el real time, como se corre dos instancias de pi en un core, seria el doble de tiempo aprox
	#3. 2 cores, el scheduller intenta distribuir los 3 procesos en los 2 cores, para cumplir con el fairness
	#2. similar a la anterior instancia, solo que en este caso hay ruido
	#4. 2 cores, puede ser que sea similar a la anterior instancia de #4, pero en este caso al haber mucho ruido, es complicado detectarlo

Ejercicio 2:
	Lo que sucede es que el proceso ./dgemm realiza una multiplicacion de matrices de manera multihilo, y distribuye cada hilo en 1 core respectivamente, y lo que sucede es que el usertime sera el tiempo total de uso en cada uno de los cores(la suma).
	profe: porque tengo muchos hilos dentro del proceso y cada hilo ejecuta en un nucleo distinto, por lo tanto el SO acumula todos los tiempos del CPU y los suma

Ejercicio 3:
	user<real: por la demora del trap y el return-from-trap añadida al tiempo del user.
	user=real: en procesos de 1 solo hilo y con pocas system calls.
	user>real: cuando el proceso es multi-hilo y cada hilo se ejecuta en una cpu distinta.

Ejercicio 4:
	a) La variable mantiene su valor x=100.
	b) No se cambian, ya que el procesos padre y el hijo son procesos independientes, por lo tanto cambiaran en su entorno unicamente, fuera no.
	c) El registro no se ve alterado, ya que los hilos de los procesos trabajan de manera independiente con respecto a la meroria.

Ejercicio 5:
	imprimira 15 "a"
	sum_{i=0}^{n} 2^n

Ejercicio 6:
	no imprime nada, ya que se ejecuta correctamente "execv" y como el mismo limpia la memoria, no realiza el printf()

Ejercicio 7:
	izq) si no tiene argumentos al llamarlo, no hace nada, de otro modo realiza execv con los mismos
	der) ?.

Ejercicio 8:
	la syscall "dup()" duplica el file-descriptor en el primer lugar libre que encuentre
	La ventaja de dup es poder manejar posibles erroes de open

Ejercicio 9:
	Crea procesos indefinidamente
	Si, limitando la cantidad de procesos que se pueden realizar.(MAX_USER_PROCESS)

Ejercicio 10:
	Descheduled:	Si o si deber terminar un proceso para seguir con otro.
	Scheduled:		No se realiza nigun proceso.
	I/O: init:		No puedo esperar por IO.
	I/O: done:		No salgo nunca de bloqueado.

Ejercicio 11:
	?

Ejercicio 12:
	a) V, porque suponiendo 1 solo core, no tiene manera de distriuir entre cores y asi user+sys es mucho mas chico que real
	b) F, porque dos procesos son independientes, por lo tanto piensa que tiene toda la memoria
	c) V, porque de esa manera se asegura que se guarden los datos para darle espacio a un nuevo proceso
	d) F, porque se podrian realizar operaciones no permitidas para el user.
	e) V, porque no hay un 101 entre el timer-interrupt y el context-switch.
	f) V, porque es una manera de difenciar exclusivamente al hijo.
	g) V, para eso se separaron
	h) F, el procesos hijo queda colgando de init.
	i) F, hay comms de padre a hijo con argv, la comm de hijo a padre se hace con return y waitpid
	j) F, se ejecuta cuando execv falla.
	k) V, se le llaman procesos zombie.

Ejercicio 13:
		T_arrival	T_cpu
	A	0			30
	B	0			20
	C	0			10

	FCFS(como tienen el mismo T_arrival, decido que a es el primero, mi politica es orden lexicografico)
	0	5	10	15	20	25	30	35	40	45	50	55	60	65	70	75
	A	A	A	A	A	A	A	B	B	B	B	B	C	C	C

	T_turnaround(A) = 30		T_response(A) = 0
	T_turnaround(B) = 20		T_response(B) = 35
	T_turnaround(C) = 10		T_response(C) = 60
	avg_turnaround = 20
	avg_response = 31.66

	SJF
	0	5	10	15	20	25	30	35	40	45	50	55	60	65	70	75
	C	C	C	B	B	B	B	B	A	A	A	A	A	A	A

	T_turnaround(A) = 30		T_response(A) = 40
	T_turnaround(B) = 20		T_response(B) = 15
	T_turnaround(C) = 10		T_response(C) = 0
	avg_turnaround = 20
	avg_response = 18.33

Ejercicio 14:
	STCF	|0	1	2	3	4	5	6	7
	Running	|B	B	B	A	C	A	A	A
	Arrive	|B		A		C			
	Ready	|		A		A			

		t_arrival	T_cpu	t_firstrun	t_completion	t_turnaround	t_response
	A	2			4		3			7				5				1
	B	0			3		0			3				3				0
	C	4			1		4			4				0				0
	
	---------------

	RR(Q=2)	|0	1	2	3	4	5	6	7
	Running	|B	B	A	A	C	B	A	A
	Arrive	|B		A		C			
	Ready	|		B		B,A	A		

		t_arrival	T_cpu	t_firstrun	t_completion	t_turnaround	t_response
	A	2			4		2			7				5				0
	B	0			3		0			5				5				0
	C	4			1		4			4				0				0

Ejercicio 15:
	interactive refiere a tiempo de respuesta corto

			bat/int		t_cpu
	FCFS	batch		no
	SJF		batch		si
	STCF	50/50		si
	RR		interactive	no
	MLFQ	interactive	no

Ejercicio 16:
		T_a	t_cpu1	t_io1	t_cpu2	t_io2	t_cpu3	t_io3	t_cpu4
	a	0	3		5		2		4		1		
	b	2	8		1		6						
	c	1	1		3		2		5		1		4		2

	RR(Q=2)	0	1	2	3	4	5	6	7	8	9	10	11	12	13	14	15	16	17	18	19	20	21	22	23	24	25
	Running	A	A	C	B	B	A	B	B	C	C	B	B	A	A	B	B	C	B	B	A	B	B	C	C	B	B
	Arrive	A	C	B																							
	Ready		C	A,B	A	A	B	C	C	B	B		A	B	B		C		B	A	B		C				
	Blocked				C	C	C	A	A	A	A	A,C	C	C	C	A,C	A	A,B	A,C	C	C	C					

Ejercicio 17:
		T_a	t_cpu
	a	0	7
	b	1	3
	c	2	4
	d	4	3
	e	7	4

	Qn -> n es el quantum de cada cola para cada proceso
	*  -> es el proceso que se esta ejecutanto

	MLFQ	0	1	2	3		4	5		6		7	8		9		10		11	12	13	14	15		16		17		18		19	20
		Q1	A*	B*	C*			D*					E*														
		Q2		A	AB	A*BC	ABC	A*BCD	B*CD	BCD	B*CDE	EDC*	EDC*	ED*	ED*	E*	E*						
		Q4									A		A	A		A		A		AC	AC	AC	AC	A*CE	A*CE	A*CE	A*CE	C*E	E*
		Q8																					

Ejercicio 18:
	a) F, el STCF compara los procesos entrantes con los actuales y elige cual continuar, independientemente si el proceso actual “gastó” su quantum o no.
	b) F, En el caso de que al SJF le llegue un proceso largo antes de los cortos, tiene el mismo turnaround time que el FCFS.
	c) V, Cada proceso se ejecuta hasta que termine, sin interrupts.
	d) V, Porque algunos procesos pueden tardar demasiado en ser ejecutados nuevamente.
	e) V, El “Allot” se gasta igual independientemente si el proceso hace I/O o no.
